{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  if (!token) return false;\n  try {\n    const decodedToken = jwtDecode(token);\n    const currentTime = Date.now() / 1000; // Convert milliseconds to seconds\n    return decodedToken.exp > currentTime; // Check if the token is expired\n  } catch (error) {\n    return false;\n  }\n};","map":{"version":3,"names":["jwtDecode","isAuthenticated","token","localStorage","getItem","decodedToken","currentTime","Date","now","exp","error"],"sources":["C:/Users/dasru/Documents/DVDStore_dev/frontend/src/utils/authUtils.js"],"sourcesContent":["import jwtDecode from 'jwt-decode';\r\n\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) return false;\r\n\r\n  try {\r\n    const decodedToken = jwtDecode(token);\r\n    const currentTime = Date.now() / 1000; // Convert milliseconds to seconds\r\n    return decodedToken.exp > currentTime; // Check if the token is expired\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAElC,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACF,MAAMG,YAAY,GAAGL,SAAS,CAACE,KAAK,CAAC;IACrC,MAAMI,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACvC,OAAOH,YAAY,CAACI,GAAG,GAAGH,WAAW,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}