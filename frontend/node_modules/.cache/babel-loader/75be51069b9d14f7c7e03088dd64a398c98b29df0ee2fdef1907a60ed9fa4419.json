{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dasru\\\\Documents\\\\DVDStore_dev\\\\frontend\\\\src\\\\PrivateRoute.js\";\nimport { jwtDecode } from \"jwt-decode\";\nimport React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isAuthenticated = () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) return false;\n  try {\n    const decodedToken = jwtDecode(token);\n    const currentTime = Date.now() / 1000; // Convert milliseconds to seconds\n    return decodedToken.exp > currentTime; // Check if the token is expired\n  } catch (error) {\n    return false;\n  }\n};\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(Route, {\n  ...rest,\n  render: props => isAuthenticated() ? /*#__PURE__*/_jsxDEV(Component, {\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 27\n  }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 54\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 3\n}, this);\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["jwtDecode","React","Redirect","Route","jsxDEV","_jsxDEV","isAuthenticated","token","localStorage","getItem","decodedToken","currentTime","Date","now","exp","error","PrivateRoute","component","Component","rest","render","props","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/dasru/Documents/DVDStore_dev/frontend/src/PrivateRoute.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\r\nimport React from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\n\r\nconst isAuthenticated = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (!token) return false;\r\n\r\n  try {\r\n    const decodedToken = jwtDecode(token);\r\n    const currentTime = Date.now() / 1000; // Convert milliseconds to seconds\r\n    return decodedToken.exp > currentTime; // Check if the token is expired\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={(props) =>\r\n      isAuthenticated() ? <Component {...props} /> : <Redirect to=\"/\" />\r\n    }\r\n  />\r\n);\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACF,MAAMG,YAAY,GAAGV,SAAS,CAACO,KAAK,CAAC;IACrC,MAAMI,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACvC,OAAOH,YAAY,CAACI,GAAG,GAAGH,WAAW,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAO,KAAK;EACd;AACF,CAAC;AAED,MAAMC,YAAY,GAAGA,CAAC;EAAEC,SAAS,EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,kBACrDd,OAAA,CAACF,KAAK;EAAA,GACAgB,IAAI;EACRC,MAAM,EAAGC,KAAK,IACZf,eAAe,CAAC,CAAC,gBAAGD,OAAA,CAACa,SAAS;IAAA,GAAKG;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC,gBAAGpB,OAAA,CAACH,QAAQ;IAACwB,EAAE,EAAC;EAAG;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAClE;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACF,CACF;AAACE,EAAA,GAPIX,YAAY;AASlB,eAAeA,YAAY;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}