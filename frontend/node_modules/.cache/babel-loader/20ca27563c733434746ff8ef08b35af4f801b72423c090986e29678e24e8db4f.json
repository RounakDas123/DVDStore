{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dasru\\\\Documents\\\\DVDStore_dev\\\\frontend\\\\src\\\\home\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport LoadingSpinner from \"../../shared/components/loader/LoadingSpinner\";\nimport CarouselContainer from \"../components/CarouselContainer\";\nimport classes from \"./Home.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [nowPlaying, setNowPlaying] = useState([]);\n  const [trending, setTrending] = useState([]);\n  const [topRated, setTopRated] = useState([]);\n  const [upcoming, setUpcoming] = useState([]);\n  const [onTheAir, setOnTheAir] = useState([]);\n  const [trendingTv, setTrendingTv] = useState([]);\n  const [topRatedTv, setTopRatedTv] = useState([]);\n  const [genreData, setGenreData] = useState([]);\n  const [contentType, setContentType] = useState(\"movie\");\n  const [loader, setLoader] = useState(true);\n  const [selectedGenre, setSelectedGenre] = useState(null);\n  const [genreLoading, setGenreLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState({\n    nowPlaying: 1,\n    trending: 1,\n    topRated: 1,\n    upcoming: 1,\n    onTheAir: 1,\n    trendingTv: 1,\n    topRatedTv: 1,\n    genre: 1\n  });\n  const apiKey = \"d987bb3825166942aa314c4768160995\";\n  const movieGenres = [{\n    id: 28,\n    name: \"Action\"\n  }, {\n    id: 12,\n    name: \"Adventure\"\n  }, {\n    id: 16,\n    name: \"Animation\"\n  }, {\n    id: 35,\n    name: \"Comedy\"\n  }, {\n    id: 80,\n    name: \"Crime\"\n  }, {\n    id: 18,\n    name: \"Drama\"\n  }, {\n    id: 27,\n    name: \"Horror\"\n  }, {\n    id: 10749,\n    name: \"Romance\"\n  }];\n  const tvGenres = [{\n    id: 10759,\n    name: \"Action & Adventure\"\n  }, {\n    id: 16,\n    name: \"Animation\"\n  }, {\n    id: 35,\n    name: \"Comedy\"\n  }, {\n    id: 80,\n    name: \"Crime\"\n  }, {\n    id: 18,\n    name: \"Drama\"\n  }, {\n    id: 10764,\n    name: \"Reality\"\n  }, {\n    id: 10765,\n    name: \"Sci-Fi & Fantasy\"\n  }, {\n    id: 99,\n    name: \"Documentary\"\n  }];\n  function checkData(data) {\n    return contentType === \"movie\" ? data.poster_path && data.title && data.vote_average && data.overview : data.poster_path && data.name && data.vote_average && data.overview;\n  }\n  const handlePageChange = (type, page) => {\n    setCurrentPage(prev => ({\n      ...prev,\n      [type]: page\n    }));\n    if (type === \"genre\" && selectedGenre) {\n      fetchGenreData(selectedGenre.id, page);\n    }\n    setTimeout(() => {\n      const targetCarousel = document.getElementById(type);\n      if (targetCarousel) {\n        targetCarousel.scrollIntoView({\n          behavior: \"instant\",\n          block: \"center\"\n        });\n      }\n    }, 500);\n  };\n  const fetchGenreData = async (genreId, page = currentPage.genre) => {\n    try {\n      setLoader(true);\n      const url = contentType === \"movie\" ? `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_genres=${genreId}&page=${page}` : `https://api.themoviedb.org/3/discover/tv?api_key=${apiKey}&with_genres=${genreId}&page=${page}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setGenreData(data.results.filter(checkData));\n    } catch (error) {\n      console.error(\"Error fetching genre data:\", error);\n    } finally {\n      setLoader(false);\n      setGenreLoading(false);\n    }\n  };\n  const handleGenreClick = genre => {\n    setSelectedGenre(genre);\n    setCurrentPage(prev => ({\n      ...prev,\n      genre: 1\n    }));\n    setTimeout(() => {\n      const targetCarousel = document.getElementById(\"genre\");\n      if (targetCarousel) {\n        targetCarousel.scrollIntoView({\n          behavior: \"instant\",\n          block: \"center\"\n        });\n      }\n    }, 500);\n  };\n  const handleContentTypeChange = type => {\n    setContentType(type);\n    setGenreData([]);\n    setGenreLoading(true);\n  };\n\n  // Set first genre on contentType change\n  useEffect(() => {\n    const firstGenre = contentType === \"movie\" ? movieGenres[0] : tvGenres[0];\n    setSelectedGenre(firstGenre);\n    setGenreData([]);\n    setCurrentPage(prev => ({\n      ...prev,\n      genre: 1\n    }));\n  }, [contentType]);\n\n  // Fetch genre data after selectedGenre and genre page are properly set\n  useEffect(() => {\n    if (selectedGenre && currentPage.genre === 1) {\n      fetchGenreData(selectedGenre.id, 1);\n    }\n  }, [selectedGenre, currentPage.genre]);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        setLoader(true);\n        if (contentType === \"movie\") {\n          const [nowPlayingRes, trendingRes, topRatedRes, upcomingRes] = await Promise.all([fetch(`https://api.themoviedb.org/3/movie/now_playing?language=en-US&page=${currentPage.nowPlaying}&api_key=${apiKey}`), fetch(`https://api.themoviedb.org/3/trending/movie/week?language=en-US&page=${currentPage.trending}&api_key=${apiKey}`), fetch(`https://api.themoviedb.org/3/movie/top_rated?language=en-US&page=${currentPage.topRated}&api_key=${apiKey}`), fetch(`https://api.themoviedb.org/3/movie/upcoming?language=en-US&page=${currentPage.upcoming}&api_key=${apiKey}`)]);\n          const [nowPlayingData, trendingData, topRatedData, upcomingData] = await Promise.all([nowPlayingRes.json(), trendingRes.json(), topRatedRes.json(), upcomingRes.json()]);\n          setNowPlaying(nowPlayingData.results.filter(checkData));\n          setTrending(trendingData.results.filter(checkData));\n          setTopRated(topRatedData.results.filter(checkData));\n          setUpcoming(upcomingData.results.filter(checkData));\n        } else {\n          const [onAirRes, trendingTvRes, topRatedTvRes] = await Promise.all([fetch(`https://api.themoviedb.org/3/tv/on_the_air?language=en-US&page=${currentPage.onTheAir}&api_key=${apiKey}`), fetch(`https://api.themoviedb.org/3/trending/tv/week?language=en-US&page=${currentPage.trendingTv}&api_key=${apiKey}`), fetch(`https://api.themoviedb.org/3/tv/top_rated?&language=en-US&page=${currentPage.topRatedTv}&api_key=${apiKey}`)]);\n          const [onAirData, trendingTvData, topRatedTvData] = await Promise.all([onAirRes.json(), trendingTvRes.json(), topRatedTvRes.json()]);\n          setOnTheAir(onAirData.results.filter(checkData));\n          setTrendingTv(trendingTvData.results.filter(checkData));\n          setTopRatedTv(topRatedTvData.results.filter(checkData));\n        }\n      } catch (error) {\n        console.error(\"Error fetching movies:\", error);\n      } finally {\n        setLoader(false);\n      }\n    };\n    fetchMovies();\n  }, [currentPage.nowPlaying, currentPage.trending, currentPage.topRated, currentPage.upcoming, currentPage.onTheAir, currentPage.trendingTv, currentPage.topRatedTv, contentType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes[\"button-container\"],\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${classes.homebutton} ${contentType === \"movie\" ? classes.active : \"\"}`,\n        onClick: () => handleContentTypeChange(\"movie\"),\n        children: \"Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${classes.homebutton} ${contentType === \"tv\" ? classes.active : \"\"}`,\n        onClick: () => handleContentTypeChange(\"tv\"),\n        children: \"TV-Series\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), loader ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this) : contentType === \"movie\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CarouselContainer, {\n        id: \"nowPlaying\",\n        heading: \"Now Playing\",\n        movieList: nowPlaying,\n        type: contentType,\n        currentPage: currentPage.nowPlaying,\n        onPageChange: page => handlePageChange(\"nowPlaying\", page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CarouselContainer, {\n        id: \"trending\",\n        heading: \"Trending\",\n        movieList: trending,\n        type: contentType,\n        currentPage: currentPage.trending,\n        onPageChange: page => handlePageChange(\"trending\", page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CarouselContainer, {\n        id: \"topRated\",\n        heading: \"Top Rated\",\n        movieList: topRated,\n        type: contentType,\n        currentPage: currentPage.topRated,\n        onPageChange: page => handlePageChange(\"topRated\", page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CarouselContainer, {\n        id: \"upcoming\",\n        heading: \"Upcoming\",\n        movieList: upcoming,\n        type: contentType,\n        currentPage: currentPage.upcoming,\n        onPageChange: page => handlePageChange(\"upcoming\", page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.genreButtons,\n        children: movieGenres.map(genre => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${classes.genreButton} ${(selectedGenre === null || selectedGenre === void 0 ? void 0 : selectedGenre.id) === genre.id ? classes.activeGenre : \"\"}`,\n          onClick: () => handleGenreClick(genre),\n          children: genre.name\n        }, genre.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CarouselContainer, {\n        id: \"genre\",\n        heading: `${(selectedGenre === null || selectedGenre === void 0 ? void 0 : selectedGenre.name) || \"Genre\"} Movies`,\n        movieList: genreData,\n        type: contentType,\n        currentPage: currentPage.genre,\n        onPageChange: page => handlePageChange(\"genre\", page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CarouselContainer, {\n        id: \"onTheAir\",\n        heading: \"On the Air\",\n        movieList: onTheAir,\n        type: contentType,\n        currentPage: currentPage.onTheAir,\n        onPageChange: page => handlePageChange(\"onTheAir\", page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CarouselContainer, {\n        id: \"trendingTv\",\n        heading: \"Trending\",\n        movieList: trendingTv,\n        type: contentType,\n        currentPage: currentPage.trendingTv,\n        onPageChange: page => handlePageChange(\"trendingTv\", page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CarouselContainer, {\n        id: \"topRatedTv\",\n        heading: \"Top Rated\",\n        movieList: topRatedTv,\n        type: contentType,\n        currentPage: currentPage.topRatedTv,\n        onPageChange: page => handlePageChange(\"topRatedTv\", page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.genreButtons,\n        children: tvGenres.map(genre => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${classes.genreButton} ${(selectedGenre === null || selectedGenre === void 0 ? void 0 : selectedGenre.id) === genre.id ? classes.activeGenre : \"\"}`,\n          onClick: () => handleGenreClick(genre),\n          children: genre.name\n        }, genre.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CarouselContainer, {\n        id: \"genre\",\n        heading: `${(selectedGenre === null || selectedGenre === void 0 ? void 0 : selectedGenre.name) || \"Genre\"} TV Series`,\n        movieList: genreData,\n        type: contentType,\n        currentPage: currentPage.genre,\n        onPageChange: page => handlePageChange(\"genre\", page)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n_s(Home, \"Ra/R1My+bI9Nxqj7Z0ZoZhSsGMo=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","LoadingSpinner","CarouselContainer","classes","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","nowPlaying","setNowPlaying","trending","setTrending","topRated","setTopRated","upcoming","setUpcoming","onTheAir","setOnTheAir","trendingTv","setTrendingTv","topRatedTv","setTopRatedTv","genreData","setGenreData","contentType","setContentType","loader","setLoader","selectedGenre","setSelectedGenre","genreLoading","setGenreLoading","currentPage","setCurrentPage","genre","apiKey","movieGenres","id","name","tvGenres","checkData","data","poster_path","title","vote_average","overview","handlePageChange","type","page","prev","fetchGenreData","setTimeout","targetCarousel","document","getElementById","scrollIntoView","behavior","block","genreId","url","response","fetch","json","results","filter","error","console","handleGenreClick","handleContentTypeChange","firstGenre","fetchMovies","nowPlayingRes","trendingRes","topRatedRes","upcomingRes","Promise","all","nowPlayingData","trendingData","topRatedData","upcomingData","onAirRes","trendingTvRes","topRatedTvRes","onAirData","trendingTvData","topRatedTvData","children","className","homebutton","active","onClick","fileName","_jsxFileName","lineNumber","columnNumber","heading","movieList","onPageChange","genreButtons","map","genreButton","activeGenre","_c","$RefreshReg$"],"sources":["C:/Users/dasru/Documents/DVDStore_dev/frontend/src/home/pages/Home.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport LoadingSpinner from \"../../shared/components/loader/LoadingSpinner\";\r\nimport CarouselContainer from \"../components/CarouselContainer\";\r\nimport classes from \"./Home.module.css\";\r\n\r\nconst Home = () => {\r\n  const [nowPlaying, setNowPlaying] = useState([]);\r\n  const [trending, setTrending] = useState([]);\r\n  const [topRated, setTopRated] = useState([]);\r\n  const [upcoming, setUpcoming] = useState([]);\r\n  const [onTheAir, setOnTheAir] = useState([]);\r\n  const [trendingTv, setTrendingTv] = useState([]);\r\n  const [topRatedTv, setTopRatedTv] = useState([]);\r\n  const [genreData, setGenreData] = useState([]);\r\n  const [contentType, setContentType] = useState(\"movie\");\r\n  const [loader, setLoader] = useState(true);\r\n  const [selectedGenre, setSelectedGenre] = useState(null);\r\n  const [genreLoading, setGenreLoading] = useState(false);\r\n\r\n  const [currentPage, setCurrentPage] = useState({\r\n    nowPlaying: 1,\r\n    trending: 1,\r\n    topRated: 1,\r\n    upcoming: 1,\r\n    onTheAir: 1,\r\n    trendingTv: 1,\r\n    topRatedTv: 1,\r\n    genre: 1,\r\n  });\r\n\r\n  const apiKey = \"d987bb3825166942aa314c4768160995\";\r\n\r\n  const movieGenres = [\r\n    { id: 28, name: \"Action\" },\r\n    { id: 12, name: \"Adventure\" },\r\n    { id: 16, name: \"Animation\" },\r\n    { id: 35, name: \"Comedy\" },\r\n    { id: 80, name: \"Crime\" },\r\n    { id: 18, name: \"Drama\" },\r\n    { id: 27, name: \"Horror\" },\r\n    { id: 10749, name: \"Romance\" },\r\n  ];\r\n\r\n  const tvGenres = [\r\n    { id: 10759, name: \"Action & Adventure\" },\r\n    { id: 16, name: \"Animation\" },\r\n    { id: 35, name: \"Comedy\" },\r\n    { id: 80, name: \"Crime\" },\r\n    { id: 18, name: \"Drama\" },\r\n    { id: 10764, name: \"Reality\" },\r\n    { id: 10765, name: \"Sci-Fi & Fantasy\" },\r\n    { id: 99, name: \"Documentary\" },\r\n  ];\r\n\r\n  function checkData(data) {\r\n    return contentType === \"movie\"\r\n      ? data.poster_path && data.title && data.vote_average && data.overview\r\n      : data.poster_path && data.name && data.vote_average && data.overview;\r\n  }\r\n\r\n  const handlePageChange = (type, page) => {\r\n    setCurrentPage((prev) => ({ ...prev, [type]: page }));\r\n\r\n    if (type === \"genre\" && selectedGenre) {\r\n      fetchGenreData(selectedGenre.id, page);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      const targetCarousel = document.getElementById(type);\r\n      if (targetCarousel) {\r\n        targetCarousel.scrollIntoView({ behavior: \"instant\", block: \"center\" });\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  const fetchGenreData = async (genreId, page = currentPage.genre) => {\r\n    try {\r\n      setLoader(true);\r\n      const url =\r\n        contentType === \"movie\"\r\n          ? `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_genres=${genreId}&page=${page}`\r\n          : `https://api.themoviedb.org/3/discover/tv?api_key=${apiKey}&with_genres=${genreId}&page=${page}`;\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      setGenreData(data.results.filter(checkData));\r\n    } catch (error) {\r\n      console.error(\"Error fetching genre data:\", error);\r\n    } finally {\r\n      setLoader(false);\r\n      setGenreLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleGenreClick = (genre) => {\r\n    setSelectedGenre(genre);\r\n    setCurrentPage((prev) => ({ ...prev, genre: 1 }));\r\n\r\n    setTimeout(() => {\r\n      const targetCarousel = document.getElementById(\"genre\");\r\n      if (targetCarousel) {\r\n        targetCarousel.scrollIntoView({ behavior: \"instant\", block: \"center\" });\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  const handleContentTypeChange = (type) => {\r\n    setContentType(type);\r\n    setGenreData([]);\r\n    setGenreLoading(true);\r\n  };\r\n\r\n  // Set first genre on contentType change\r\n  useEffect(() => {\r\n    const firstGenre = contentType === \"movie\" ? movieGenres[0] : tvGenres[0];\r\n    setSelectedGenre(firstGenre);\r\n    setGenreData([]);\r\n    setCurrentPage((prev) => ({ ...prev, genre: 1 }));\r\n  }, [contentType]);\r\n\r\n  // Fetch genre data after selectedGenre and genre page are properly set\r\n  useEffect(() => {\r\n    if (selectedGenre && currentPage.genre === 1) {\r\n      fetchGenreData(selectedGenre.id, 1);\r\n    }\r\n  }, [selectedGenre, currentPage.genre]);\r\n\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      try {\r\n        setLoader(true);\r\n\r\n        if (contentType === \"movie\") {\r\n          const [nowPlayingRes, trendingRes, topRatedRes, upcomingRes] = await Promise.all([\r\n            fetch(`https://api.themoviedb.org/3/movie/now_playing?language=en-US&page=${currentPage.nowPlaying}&api_key=${apiKey}`),\r\n            fetch(`https://api.themoviedb.org/3/trending/movie/week?language=en-US&page=${currentPage.trending}&api_key=${apiKey}`),\r\n            fetch(`https://api.themoviedb.org/3/movie/top_rated?language=en-US&page=${currentPage.topRated}&api_key=${apiKey}`),\r\n            fetch(`https://api.themoviedb.org/3/movie/upcoming?language=en-US&page=${currentPage.upcoming}&api_key=${apiKey}`),\r\n          ]);\r\n\r\n          const [nowPlayingData, trendingData, topRatedData, upcomingData] = await Promise.all([\r\n            nowPlayingRes.json(),\r\n            trendingRes.json(),\r\n            topRatedRes.json(),\r\n            upcomingRes.json(),\r\n          ]);\r\n\r\n          setNowPlaying(nowPlayingData.results.filter(checkData));\r\n          setTrending(trendingData.results.filter(checkData));\r\n          setTopRated(topRatedData.results.filter(checkData));\r\n          setUpcoming(upcomingData.results.filter(checkData));\r\n        } else {\r\n          const [onAirRes, trendingTvRes, topRatedTvRes] = await Promise.all([\r\n            fetch(`https://api.themoviedb.org/3/tv/on_the_air?language=en-US&page=${currentPage.onTheAir}&api_key=${apiKey}`),\r\n            fetch(`https://api.themoviedb.org/3/trending/tv/week?language=en-US&page=${currentPage.trendingTv}&api_key=${apiKey}`),\r\n            fetch(`https://api.themoviedb.org/3/tv/top_rated?&language=en-US&page=${currentPage.topRatedTv}&api_key=${apiKey}`),\r\n          ]);\r\n\r\n          const [onAirData, trendingTvData, topRatedTvData] = await Promise.all([\r\n            onAirRes.json(),\r\n            trendingTvRes.json(),\r\n            topRatedTvRes.json(),\r\n          ]);\r\n\r\n          setOnTheAir(onAirData.results.filter(checkData));\r\n          setTrendingTv(trendingTvData.results.filter(checkData));\r\n          setTopRatedTv(topRatedTvData.results.filter(checkData));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching movies:\", error);\r\n      } finally {\r\n        setLoader(false);\r\n      }\r\n    };\r\n\r\n    fetchMovies();\r\n  }, [\r\n    currentPage.nowPlaying,\r\n    currentPage.trending,\r\n    currentPage.topRated,\r\n    currentPage.upcoming,\r\n    currentPage.onTheAir,\r\n    currentPage.trendingTv,\r\n    currentPage.topRatedTv,\r\n    contentType,\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <div className={classes[\"button-container\"]}>\r\n        <button\r\n          className={`${classes.homebutton} ${contentType === \"movie\" ? classes.active : \"\"}`}\r\n          onClick={() => handleContentTypeChange(\"movie\")}\r\n        >\r\n          Movies\r\n        </button>\r\n        <button\r\n          className={`${classes.homebutton} ${contentType === \"tv\" ? classes.active : \"\"}`}\r\n          onClick={() => handleContentTypeChange(\"tv\")}\r\n        >\r\n          TV-Series\r\n        </button>\r\n      </div>\r\n\r\n      {loader ? (\r\n        <LoadingSpinner />\r\n      ) : contentType === \"movie\" ? (\r\n        <>\r\n          <CarouselContainer id=\"nowPlaying\" heading=\"Now Playing\" movieList={nowPlaying} type={contentType} currentPage={currentPage.nowPlaying} onPageChange={(page) => handlePageChange(\"nowPlaying\", page)} />\r\n          <CarouselContainer id=\"trending\" heading=\"Trending\" movieList={trending} type={contentType} currentPage={currentPage.trending} onPageChange={(page) => handlePageChange(\"trending\", page)} />\r\n          <CarouselContainer id=\"topRated\" heading=\"Top Rated\" movieList={topRated} type={contentType} currentPage={currentPage.topRated} onPageChange={(page) => handlePageChange(\"topRated\", page)} />\r\n          <CarouselContainer id=\"upcoming\" heading=\"Upcoming\" movieList={upcoming} type={contentType} currentPage={currentPage.upcoming} onPageChange={(page) => handlePageChange(\"upcoming\", page)} />\r\n\r\n          <div className={classes.genreButtons}>\r\n            {movieGenres.map((genre) => (\r\n              <button key={genre.id} className={`${classes.genreButton} ${selectedGenre?.id === genre.id ? classes.activeGenre : \"\"}`} onClick={() => handleGenreClick(genre)}>\r\n                {genre.name}\r\n              </button>\r\n            ))}\r\n          </div>\r\n\r\n          <CarouselContainer id=\"genre\" heading={`${selectedGenre?.name || \"Genre\"} Movies`} movieList={genreData} type={contentType} currentPage={currentPage.genre} onPageChange={(page) => handlePageChange(\"genre\", page)} />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <CarouselContainer id=\"onTheAir\" heading=\"On the Air\" movieList={onTheAir} type={contentType} currentPage={currentPage.onTheAir} onPageChange={(page) => handlePageChange(\"onTheAir\", page)} />\r\n          <CarouselContainer id=\"trendingTv\" heading=\"Trending\" movieList={trendingTv} type={contentType} currentPage={currentPage.trendingTv} onPageChange={(page) => handlePageChange(\"trendingTv\", page)} />\r\n          <CarouselContainer id=\"topRatedTv\" heading=\"Top Rated\" movieList={topRatedTv} type={contentType} currentPage={currentPage.topRatedTv} onPageChange={(page) => handlePageChange(\"topRatedTv\", page)} />\r\n\r\n          <div className={classes.genreButtons}>\r\n            {tvGenres.map((genre) => (\r\n              <button key={genre.id} className={`${classes.genreButton} ${selectedGenre?.id === genre.id ? classes.activeGenre : \"\"}`} onClick={() => handleGenreClick(genre)}>\r\n                {genre.name}\r\n              </button>\r\n            ))}\r\n          </div>\r\n\r\n          <CarouselContainer id=\"genre\" heading={`${selectedGenre?.name || \"Genre\"} TV Series`} movieList={genreData} type={contentType} currentPage={currentPage.genre} onPageChange={(page) => handlePageChange(\"genre\", page)} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}